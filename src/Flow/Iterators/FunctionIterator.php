<?php
namespace PhpKit\Flow\Iterators;
use Iterator;

/**
 * Iterates over values generated by repeatedly invoking a function or class method.
 * <p>This allows you to write generator function look-alikes on PHP<5.5.
 *
 * <p>Example:
 * <code>
 * $it = new FunctionIterator (function ($i, $prev) {
 *    if ($i < 10) return $i * 10;
 * });
 * foreach ($it as $v) echo "$v\n";
 * </code>
 * <p>An example where the iterator also returns keys:
 * <code>
 * $it = new FunctionIterator (function (&$key, $prev) {
 *    static $k = 50;
 *    if ($prev < 1000) {
 *      $key = 'item_' . ($k ++);
 *      return $prev * 10;
 *    }
 * });
 * foreach ($it as $v) echo "$v\n";
 * </code>
 */
class FunctionIterator implements Iterator
{
  private $cur;
  private $fn;
  private $key;
  private $prev;
  private $seed;
  private $stop;

  /**
   * @param callable $fn   A callback that receives the current key and the previous value, and returns the next
   *                       iteration value. If no value (or `null`) is returned, that finishes the iteration.
   *                       <p>By default, keys are integers auto-generated incrementally from 0.
   *                       <p>To override the automatic key, declare the first argument of the callback as a reference
   *                       and, within the function, set that argument to the desired value.
   *                       <p>Note: {@see FunctionIterator::next()} will try to increment that value for the next
   *                       iteration, but the callback can igore it and always set the desired key for each iteration.
   * @param mixed    $seed A value to be passed as second argument to the callback function on the first call to it.
   *                       Subsequent calls will receive the previously returned value, unless
   *                       {@see FunctionIterator::rewind()} is called.
   */
  function __construct (callable $fn, $seed = null)
  {
    $this->fn   = $fn;
    $this->seed = $seed;
  }

  function current (): mixed
  {
    return $this->cur;
  }

  function key (): mixed
  {
    return $this->key;
  }

  function next (): void
  {
    ++$this->key;
  }

  function rewind (): void
  {
    $this->key  = 0;
    $this->prev = $this->seed;
    $this->cur  = null;
    $this->stop = false;
  }

  function valid (): bool
  {
    if ($this->stop) return false;
    $fn = $this->fn;
    return $this->stop = is_null ($this->cur = $fn ($this->key, $this->prev));
  }
}
